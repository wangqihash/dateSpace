1. http 和 https 有什么区别
    http工作再TCP协议80端口下,其封装的信息都是明文的，=> 如果有人 抓到数据包，你在一个http request里的数据都能见到。
    https工作在SSL/TLS协议443端口下,[较安全]

2. webpack 和 gulp 的区别
    gulp 的原理就是通过管道执行一个个的任务,如果需要手动单个添加，这种是不错的
          gulp很大部分也是对html,css,js编译后合并混淆压缩
    wbepack 被称为 模块加载机 他的好处在于，可以直接的拿过来套用，
            webpack将js,css,[包括各种预处理器],图片这些都视为资源，每个资源都是module,
            而module之间存在相互依赖，webpack根据module之间依赖进行打包
    区别：  gulp适合用哪什么加什么，这种比较适合学习
            webpack通过loader的概念让配置更加容易些，再也不用和一堆文件路径打交道了


3. es6 中的Promise

4. 当用户输入url地址时发生了什么
      http://www.cnblogs.com/kongxy/p/4615226.html

      1. 将域名解析成ip => as 输入 www.baidu.com 需要将此域名解析成 不方便记忆的ip 让计算机理解
      2. 这里通过DNS解析域名，
      3. 客户端发送HTTP请求 => 请求包括 请求报头和请求主体两个部分，  
          请求报头包括: get/set url 协议http/https 以及 cookie
      4. TCP协议通过三次握手 =>   
      5. 服务器接收数据服务器响应请求  =>
      6. 页面渲染 =>  解析HTML以构建DOM树 –> 构建渲染树 –> 布局渲染树 –> 绘制渲染树。
                        html标签              css img script 样式脚本

5. 单向数据流 和 双向数据流的区别
      http://www.jianshu.com/p/2fa10b29488d
      单向数据流 => 数据流动方向可以跟踪,流动单一，追查问题的时候更快捷,缺点就是写起来不要方便,
                => 要是 view 发生改变就必须创建各种 action 来处理对应的 state

      双向数据流 => 值和 UI 双绑定, 这种修改特方便, 但是由于各种数据相互依赖相互绑定，导致
                => 数据问题的源头难以被跟踪到, 子组件修改父组件，兄弟组件互相修改有有违设计原则。

        小结：  对于非UI 控件来说，不存在双向，只有单向。只有UI 控件才有双向的问题
               双向绑定在一些需要实时反应用户输入的场合会非常方便（比如多级联动菜单）

6. 项目中你是如何使用闭包的
    优点 =>  使用匿名函数模仿块级作用域，定义访问私有变量的特权方法，避免全局变量污染等，

    (function(){ 代码.... })(); 主要起到代码隔离，搜索不会因为引用的其他插件中有相同的方法或属性而导致冲突

7.
